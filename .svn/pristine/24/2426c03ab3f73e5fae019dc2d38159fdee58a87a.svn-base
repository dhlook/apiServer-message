package com.demo.apiserver.message.service;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.demo.apiserver.message.common.CommonUtils;
import com.demo.apiserver.message.domain.BaseDomain;
import com.demo.apiserver.message.domain.CommonType;
import com.demo.apiserver.message.repository.ElasticSearchDao;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class TopicService {
	private static final Logger logger = LoggerFactory.getLogger(TopicService.class);
    // ObjectMapper는 thread-safe 하므로 static하게 사용한다.
    private static final ObjectMapper mapper = new ObjectMapper();

    @Autowired
    private ElasticSearchDao esDao;
    
    @PostConstruct
    public void init() {
        // mapping 되는 field가 없다면 무시한다.
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        // null값 필드 제외
        mapper.setSerializationInclusion(Include.NON_NULL);
        
    }

    public void messageListJob(String topic, List<BaseDomain> list) {
    	
    	try {
    		
    		List<CommonType> logList = new ArrayList<CommonType>();

            for (BaseDomain domain : list) {
            	CommonType log = mapper.readerFor(CommonType.class).readValue(domain.getPayload());
                log.setCustomerId(domain.getCustomerId());
                log.setCaseId(domain.getCaseId());
                log.setAgentId(domain.getAgentId());
                log.setCollectDate(domain.getCollectDate());
                log.setTimeZone(CommonUtils.getTimeZoneString(domain.getTimeZone()));
                log.setTimeZoneName(domain.getTimeZone());
                log.setProduct(domain.getProduct());
                log.setProductSeq(domain.getProductSeq());
                log.setAgentName(domain.getAgentName());
                log.setAgentDeptName(domain.getAgentDeptName());
                log.setAppName(topic);
                logList.add(log);
            }
            esDao.insertCommonTypeData(topic, logList);
            
        } catch (JsonProcessingException e) {
            logger.error("JsonProcessingException :" + e.toString());
            e.printStackTrace();
        } catch (Exception e) {
            logger.error("Exception : " + e.toString());
            e.printStackTrace();
        }
    }
    
    public void messageFileAndMailContentsJob(String topic, List<CommonType> list) {
        esDao.insertCommonTypeData(topic, list);
    }
    
}
